// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package externalapi

import (
	"context"
	"github.com/mbatimel/RabbitMQAndGolang/subscriptions/internal/interfaces"
	"github.com/mbatimel/RabbitMQAndGolang/subscriptions/internal/transport/jsonRPC/externalapi/viewer"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"time"
)

type loggerSubscription struct {
	next interfaces.Subscription
}

func loggerMiddlewareSubscription() MiddlewareSubscription {
	return func(next interfaces.Subscription) interfaces.Subscription {
		return &loggerSubscription{next: next}
	}
}

func (m loggerSubscription) ActiveSubscription(ctx context.Context, limitId int, price int) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "Subscription").Str("method", "activeSubscription").Logger()
	defer func(_begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method": "subscription.activeSubscription",
				"request": viewer.Sprintf("%+v", requestSubscriptionActiveSubscription{
					LimitId: limitId,
					Price:   price,
				}),
				"response": viewer.Sprintf("%+v", responseSubscriptionActiveSubscription{}),
			}
			ev.Fields(fields).Str("took", time.Since(_begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call activeSubscription")
			return
		}
		logger.Info().Func(logHandle).Msg("call activeSubscription")
	}(time.Now())
	return m.next.ActiveSubscription(ctx, limitId, price)
}
