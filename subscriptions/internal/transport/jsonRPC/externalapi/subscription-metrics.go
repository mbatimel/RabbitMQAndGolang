// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package externalapi

import (
	"context"
	v2 "github.com/gofiber/fiber/v2"
	"github.com/mbatimel/RabbitMQAndGolang/subscriptions/internal/interfaces"
	"strconv"
	"time"
)

type metricsSubscription struct {
	next interfaces.Subscription
}

func metricsMiddlewareSubscription(next interfaces.Subscription) interfaces.Subscription {
	return &metricsSubscription{next: next}
}

func (m metricsSubscription) ActiveSubscription(ctx context.Context, limitId int, price int) (err error) {

	defer func(_begin time.Time) {
		var (
			success = true
			errCode int
		)
		if err != nil {
			success = false
			errCode = v2.StatusInternalServerError
			ec, ok := err.(withErrorCode)
			if ok {
				errCode = ec.Code()
			}
		}
		RequestCount.WithLabelValues("subscription", "activeSubscription", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestCountAll.WithLabelValues("subscription", "activeSubscription", strconv.FormatBool(success), strconv.Itoa(errCode)).Add(1)
		RequestLatency.WithLabelValues("subscription", "activeSubscription", strconv.FormatBool(success), strconv.Itoa(errCode)).Observe(time.Since(_begin).Seconds())
	}(time.Now())

	return m.next.ActiveSubscription(ctx, limitId, price)
}
